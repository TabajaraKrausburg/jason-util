/*
    Project logtest

    Gradle build file for Jason Application
*/

defaultTasks 'run'

apply plugin: 'java'
apply plugin: 'eclipse'

version '1.0'
group   'org.jason'

sourceCompatibility = 16
targetCompatibility = 16

repositories {
    mavenCentral()

    //maven { url "http://jacamo.sourceforge.net/maven2" }
    maven { url "https://raw.github.com/jacamo-lang/mvn-repo/master" }
    maven { url "https://jade.tilab.com/maven/" }
    
    flatDir { dirs 'lib' }
}

dependencies {
    implementation group: 'org.jason',     name: 'jason' ,   version: '2.6.3'
    implementation group: 'org.json',      name: 'json',     version: '20210307'
    implementation 'org.jetbrains:annotations:22.0.0'
}

sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}

task run (type: JavaExec, dependsOn: 'classes') {
    description 'runs the test application'
    main 'jason.infra.centralised.RunCentralisedMAS'
    args 'logtest.mas2j'
    classpath sourceSets.main.runtimeClasspath
}

task blocks (type: JavaExec, dependsOn: 'classes') {
    description 'runs the blocksworld application'
    main 'jason.infra.centralised.RunCentralisedMAS'
    args 'blocksworld.mas2j'
    classpath sourceSets.main.runtimeClasspath
}

task copyJarsToBuild {
    inputs.files configurations.runtimeClasspath.files
    outputs.dir  'build/libs'
    doLast {
        copy {
            from configurations.runtimeClasspath
            into 'build/libs'
        }
    }
}
task toJar (type: Jar, dependsOn: 'copyJarsToBuild') {
    // from sourceSets.main.runtimeClasspath
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        sourceSets.main.runtimeClasspath
        // configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
        // sourceSets.main.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } 
        // sourceSets.main.runtimeClasspath
    }
    // from { sourceSets.main.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    // // from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    // with jar  
    manifest {
        attributes(
            'Class-Path': configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { it.getName() }.join(' '),
            'Main-Class': "jason.fuzzer.Main"
        )
    }  
}

task jazzer(type: Exec){
    description 'runs Jazzer'
    commandLine './jazzer', '--cp=build/libs/jason-util-1.0.jar', '--target_class=jason.fuzzer.FuzzerTarget'
}

clean {
    delete 'bin'
    delete 'build'
}

